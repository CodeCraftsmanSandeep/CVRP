import os
import argparse
import subprocess
import sys
import csv

def find_and_process(input_dir, exe_path, output_dir):
    # Ensure the output directory exists
    os.makedirs(output_dir, exist_ok=True)

    # Path for the accumulated results CSV
    acc_file = os.path.join(output_dir, 'accumulated_results.csv')

    # Flush (overwrite) the accumulated results CSV with header
    try:
        with open(acc_file, 'w', newline='') as csvf:
            writer = csv.writer(csvf)
            writer.writerow(['file-name', 'minCost', 'correctness'])
    except Exception as e:
        print(f"Error initializing accumulated results: {e}", file=sys.stderr)
        return

    # Walk through all directories under input_dir
    for root, dirs, files in os.walk(input_dir):
        for file in files:
            if file.endswith('.vrp'):
                vrp_path = os.path.join(root, file)
                # Determine relative path to preserve structure
                rel_dir = os.path.relpath(root, input_dir)
                base_name = os.path.splitext(file)[0]

                # Create output subdirectory: output_dir/rel_dir/base_name
                out_subdir = os.path.join(output_dir, rel_dir, base_name)
                os.makedirs(out_subdir, exist_ok=True)

                # Path for the solver output
                sol_file = os.path.join(out_subdir, f"{base_name}.exe_sol")

                # Run the executable on the .vrp file, redirecting output
                try:
                    with open(sol_file, 'w') as solf:
                        subprocess.run([exe_path, vrp_path], stdout=solf, check=True)
                    print(f"Solved {vrp_path} -> {sol_file}")
                except subprocess.CalledProcessError as e:
                    print(f"Error running solver on {vrp_path}: {e}", file=sys.stderr)
                    continue

                # Run the output parser on the generated solution
                try:
                    subprocess.run([
                        sys.executable, 'output_parser.py',
                        '--vrp_file', vrp_path,
                        '--exe_out', sol_file
                    ], check=True)
                    print(f"Parsed output for {base_name}")
                except subprocess.CalledProcessError as e:
                    print(f"Error parsing output for {vrp_path}: {e}", file=sys.stderr)
                    continue

                # After parsing, read the .sol file generated by the parser
                parsed_sol = os.path.join(out_subdir, f"{base_name}.sol")
                if os.path.exists(parsed_sol):
                    try:
                        with open(parsed_sol) as pf:
                            lines = pf.readlines()
                        if len(lines) >= 2:
                            second_line = lines[1].strip()
                            parts = [p.strip() for p in second_line.split(',')]
                            if len(parts) >= 3:
                                _, min_cost, correctness = parts[:3]
                            elif len(parts) == 2:
                                min_cost, correctness = parts
                            else:
                                min_cost, correctness = parts[0], ''

                            # Append result to the CSV immediately
                            with open(acc_file, 'a', newline='') as csvf:
                                writer = csv.writer(csvf)
                                writer.writerow([base_name, min_cost, correctness])

                        else:
                            print(f"Warning: {parsed_sol} has less than 2 lines", file=sys.stderr)
                    except Exception as e:
                        print(f"Error reading parsed sol file {parsed_sol}: {e}", file=sys.stderr)
                else:
                    print(f"Parsed solution file not found: {parsed_sol}", file=sys.stderr)

def main():
    parser = argparse.ArgumentParser(description="Recursively solve VRP files and parse results.")
    parser.add_argument('--input_dir', required=True, help='Path to root directory containing .vrp files')
    parser.add_argument('--exe', dest='exe', required=True, help='Path to VRP solver executable')
    parser.add_argument('--output_dir', required=True, help='Directory where output folders will be created')
    args = parser.parse_args()

    find_and_process(args.input_dir, args.exe, args.output_dir)

if __name__ == '__main__':
    main()
